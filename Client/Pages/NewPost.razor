@page "/bz-admin/post/new"
@using BlazorCms.Shared
@using BlazorCms.ViewModels
@using System.Security.Claims
@inject IPostViewModel _postViewModel

<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <h1>Create post</h1>
                    <MessageNotify Alert="success" Title="@_postViewModel.Message" Display="@_postViewModel.Display" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <SfTextBox @bind-value="@_postViewModel.PostTitle" Placeholder='News title'></SfTextBox>
                    <br><br>
                    <SfUploader ID="UploadFiles" AutoUpload="false">
                        <UploaderEvents Success="_postViewModel.OnImageUploadedSuccess"></UploaderEvents>
                        <UploaderAsyncSettings SaveUrl="posts/uploadimage" RemoveUrl="posts/removeimage"></UploaderAsyncSettings>
                    </SfUploader>
                    <br>
                    <SfRichTextEditor @bind-value="@_postViewModel.PostContent">
                        <RichTextEditorToolbarSettings Items="@Tools" />
                    </SfRichTextEditor>
                    <br>
                    <SfButton @onclick="_postViewModel.Create" CssClass="e-info">Create</SfButton>
                </div>
            </div>
        </div>
        
    </Authorized>
    <NotAuthorized>
        <UserAuthForm></UserAuthForm>
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationState;
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

            _postViewModel.PostAuthor = Convert.ToInt32(claim?.Value);

        }
    }    

}

<style>
#DropArea {
    padding: 50px 25px;
    margin: 30px auto;
    border: 1px solid #c3c3c3;
    text-align: center;
    width: 20%;
    display: inline-flex;
}

.e-file-select,
.e-file-drop {
    display: none;
}

body .e-upload-drag-hover {
    outline: 2px dashed brown;
}

#uploadfile {
    width: 60%;
    display: inline-flex;
    margin-left: 5%;
}
</style>