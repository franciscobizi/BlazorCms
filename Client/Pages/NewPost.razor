@page "/bz-admin/post/new"
@using BlazorCms.ViewModels
@using System.Security.Claims
@inject IPostViewModel _postViewModel

<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <h1>Create post</h1>
                    <MessageNotify Alert="success" Title="@_postViewModel.Message" Display="@_postViewModel.Display" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-9">
                    <SfTextBox Placeholder='Post title' @bind-Value="@_postViewModel.PostTitle"></SfTextBox>
                    <br><br>
                    <SfRichTextEditor @bind-value="@_postViewModel.PostContent">
                        <RichTextEditorToolbarSettings Items="@_postViewModel.Tools" />
                    </SfRichTextEditor>
                    <br><br>
                    <SfButton @onclick="_postViewModel.Create" CssClass="e-info">Create</SfButton>
                </div>
                <div class="col-sm-3">
                    <h5>Thumbnail</h5>
                    <div class="thumbnail">
                        <img src="@_postViewModel.PostThumbnail" alt="@_postViewModel.PostTitle">
                    </div>
                        <SfUploader ID="UploadFiles" AutoUpload="false">
                            <UploaderEvents Success="_postViewModel.OnImageUploadedSuccess"></UploaderEvents>
                            <UploaderAsyncSettings SaveUrl="blobstorage/uploadimage" RemoveUrl="blobstorage/removeimage"></UploaderAsyncSettings>
                        </SfUploader>
                    <hr>
                    <h5>Date</h5>
                    <input style="width:100%" type="date" @bind-value="@_postViewModel.PostCreated">
                </div>
            </div>
        </div>
        
    </Authorized>
    <NotAuthorized>
        <UserAuthForm></UserAuthForm>
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationState;
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

            _postViewModel.PostAuthor = Convert.ToInt64(claim?.Value);

        }
    }    

}

